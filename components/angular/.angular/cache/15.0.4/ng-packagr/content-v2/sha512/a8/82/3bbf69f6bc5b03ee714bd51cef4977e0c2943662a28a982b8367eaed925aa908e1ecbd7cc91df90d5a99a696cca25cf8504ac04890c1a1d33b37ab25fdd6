{"hash":"d1ef44eb137f1939632c21c9a62c39890968b663","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Subject, from, mergeMap, EMPTY, takeUntil } from 'rxjs';\nimport { tsParticles } from 'tsparticles-engine';\n\nclass NgParticlesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.particlesLoaded = new EventEmitter();\n        this.destroy$ = new Subject();\n        this.id = 'tsparticles';\n    }\n    ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        const cb = (container) => {\n            this.container = container;\n            this.particlesLoaded.emit(container);\n        };\n        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())\n            .pipe(mergeMap(() => {\n            if (this.url) {\n                return tsParticles.loadJSON(this.id, this.url);\n            }\n            else if (this.options) {\n                return tsParticles.load(this.id, this.options);\n            }\n            else {\n                console.error('You must specify options or url to load tsParticles');\n                return EMPTY;\n            }\n        }), takeUntil(this.destroy$))\n            .subscribe(cb);\n    }\n    ngOnDestroy() {\n        this.container?.destroy();\n        this.destroy$.next();\n    }\n}\nNgParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nNgParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: NgParticlesComponent, selector: \"ng-particles\", inputs: { options: \"options\", url: \"url\", id: \"id\", particlesInit: \"particlesInit\" }, outputs: { particlesLoaded: \"particlesLoaded\" }, ngImport: i0, template: '<div [id]=\"id\"></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng-particles',\n                    template: '<div [id]=\"id\"></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { options: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], particlesInit: [{\n                type: Input\n            }], particlesLoaded: [{\n                type: Output\n            }] } });\nclass ParticlesComponent extends NgParticlesComponent {\n    constructor(platformId) {\n        super(platformId);\n        this.platformId = platformId;\n        this.particlesLoaded = new EventEmitter();\n        this.id = 'tsparticles';\n    }\n}\nParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: ParticlesComponent, selector: \"Particles\", inputs: { options: \"options\", url: \"url\", id: \"id\", particlesInit: \"particlesInit\" }, outputs: { particlesLoaded: \"particlesLoaded\" }, usesInheritance: true, ngImport: i0, template: '<div [id]=\"id\"></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ParticlesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'Particles',\n                    template: '<div [id]=\"id\"></div>',\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { options: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], particlesInit: [{\n                type: Input\n            }], particlesLoaded: [{\n                type: Output\n            }] } });\n\nclass NgParticlesModule {\n}\nNgParticlesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgParticlesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule, declarations: [NgParticlesComponent, ParticlesComponent], exports: [NgParticlesComponent, ParticlesComponent] });\nNgParticlesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgParticlesComponent, ParticlesComponent],\n                    exports: [NgParticlesComponent, ParticlesComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-particles\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgParticlesComponent, NgParticlesModule, ParticlesComponent };\n//# sourceMappingURL=ng-particles.mjs.map\n//# sourceMappingURL=ng-particles.mjs.map\n","map":{"version":3,"file":"ng-particles.mjs","sources":["../../../projects/ng-particles/src/lib/ng-particles.component.ts","../../../projects/ng-particles/src/lib/ng-particles.module.ts","../../../projects/ng-particles/src/public-api.ts","../../../projects/ng-particles/src/ng-particles.ts"],"sourcesContent":["import { AfterViewInit, Component, EventEmitter, Inject, Input, OnDestroy, Output, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { EMPTY, from, mergeMap, Subject, takeUntil } from 'rxjs';\nimport { tsParticles } from 'tsparticles-engine';\nimport type { Container, Engine } from 'tsparticles-engine';\nimport { IParticlesProps } from './ng-particles.module';\n\n@Component({\n    selector: 'ng-particles',\n    template: '<div [id]=\"id\"></div>',\n})\nexport class NgParticlesComponent implements AfterViewInit, OnDestroy {\n    @Input() options?: IParticlesProps;\n    @Input() url?: string;\n    @Input() id: string;\n    @Input() particlesInit?: (engine: Engine) => Promise<void>;\n    @Output() particlesLoaded: EventEmitter<Container> = new EventEmitter<Container>();\n\n    private destroy$ = new Subject<void>();\n    private container?: Container;\n\n    constructor(@Inject(PLATFORM_ID) protected platformId: string) {\n        this.id = 'tsparticles';\n    }\n\n    public ngAfterViewInit(): void {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n\n        const cb = (container?: Container) => {\n            this.container = container;\n            this.particlesLoaded.emit(container);\n        };\n\n        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())\n            .pipe(\n                mergeMap(() => {\n                    if (this.url) {\n                        return tsParticles.loadJSON(this.id, this.url);\n                    } else if (this.options) {\n                        return tsParticles.load(this.id, this.options);\n                    } else {\n                        console.error('You must specify options or url to load tsParticles');\n                        return EMPTY;\n                    }\n                }),\n                takeUntil(this.destroy$)\n            )\n            .subscribe(cb);\n    }\n\n    public ngOnDestroy(): void {\n        this.container?.destroy();\n        this.destroy$.next();\n    }\n}\n\n@Component({\n    selector: 'Particles',\n    template: '<div [id]=\"id\"></div>',\n})\nexport class ParticlesComponent extends NgParticlesComponent {\n    @Input() override options?: IParticlesProps;\n    @Input() override url?: string;\n    @Input() override id: string;\n    @Input() override particlesInit?: (engine: Engine) => Promise<void>;\n    @Output() override particlesLoaded: EventEmitter<Container> = new EventEmitter<Container>();\n\n    constructor(@Inject(PLATFORM_ID) protected override platformId: string) {\n        super(platformId);\n\n        this.id = 'tsparticles';\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { NgParticlesComponent, ParticlesComponent } from './ng-particles.component';\nimport type { ISourceOptions } from 'tsparticles-engine';\n\n@NgModule({\n    declarations: [NgParticlesComponent, ParticlesComponent],\n    exports: [NgParticlesComponent, ParticlesComponent],\n})\nexport class NgParticlesModule {}\n\nexport type IParticlesProps = ISourceOptions;\nexport type IParticlesParams = IParticlesProps;\n","/*\n * Public API Surface of ng-particles\n */\n\nexport * from './lib/ng-particles.component';\nexport * from './lib/ng-particles.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, PLATFORM_ID, Component, Inject, Input, Output, NgModule } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { Subject, from, mergeMap, EMPTY, takeUntil } from 'rxjs';\nimport { tsParticles } from 'tsparticles-engine';\n\nclass NgParticlesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.particlesLoaded = new EventEmitter();\n        this.destroy$ = new Subject();\n        this.id = 'tsparticles';\n    }\n    ngAfterViewInit() {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n        const cb = (container) => {\n            this.container = container;\n            this.particlesLoaded.emit(container);\n        };\n        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())\n            .pipe(mergeMap(() => {\n            if (this.url) {\n                return tsParticles.loadJSON(this.id, this.url);\n            }\n            else if (this.options) {\n                return tsParticles.load(this.id, this.options);\n            }\n            else {\n                console.error('You must specify options or url to load tsParticles');\n                return EMPTY;\n            }\n        }), takeUntil(this.destroy$))\n            .subscribe(cb);\n    }\n    ngOnDestroy() {\n        var _a;\n        (_a = this.container) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.destroy$.next();\n    }\n}\nNgParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nNgParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: NgParticlesComponent, selector: \"ng-particles\", inputs: { options: \"options\", url: \"url\", id: \"id\", particlesInit: \"particlesInit\" }, outputs: { particlesLoaded: \"particlesLoaded\" }, ngImport: i0, template: '<div [id]=\"id\"></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ng-particles',\n                    template: '<div [id]=\"id\"></div>',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { options: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], particlesInit: [{\n                type: Input\n            }], particlesLoaded: [{\n                type: Output\n            }] } });\nclass ParticlesComponent extends NgParticlesComponent {\n    constructor(platformId) {\n        super(platformId);\n        this.platformId = platformId;\n        this.particlesLoaded = new EventEmitter();\n        this.id = 'tsparticles';\n    }\n}\nParticlesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ParticlesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nParticlesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.4\", type: ParticlesComponent, selector: \"Particles\", inputs: { options: \"options\", url: \"url\", id: \"id\", particlesInit: \"particlesInit\" }, outputs: { particlesLoaded: \"particlesLoaded\" }, usesInheritance: true, ngImport: i0, template: '<div [id]=\"id\"></div>', isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: ParticlesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'Particles',\n                    template: '<div [id]=\"id\"></div>',\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }];\n    }, propDecorators: { options: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], particlesInit: [{\n                type: Input\n            }], particlesLoaded: [{\n                type: Output\n            }] } });\n\nclass NgParticlesModule {\n}\nNgParticlesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgParticlesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule, declarations: [NgParticlesComponent, ParticlesComponent], exports: [NgParticlesComponent, ParticlesComponent] });\nNgParticlesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: NgParticlesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgParticlesComponent, ParticlesComponent],\n                    exports: [NgParticlesComponent, ParticlesComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-particles\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgParticlesComponent, NgParticlesModule, ParticlesComponent };\n//# sourceMappingURL=ng-particles.mjs.map\n//# sourceMappingURL=ng-particles.mjs.map\n","map":{"version":3,"file":"ng-particles.mjs","sources":["../../../projects/ng-particles/src/lib/ng-particles.component.ts","../../../projects/ng-particles/src/lib/ng-particles.module.ts","../../../projects/ng-particles/src/public-api.ts","../../../projects/ng-particles/src/ng-particles.ts"],"sourcesContent":["import { AfterViewInit, Component, EventEmitter, Inject, Input, OnDestroy, Output, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\nimport { EMPTY, from, mergeMap, Subject, takeUntil } from 'rxjs';\nimport { tsParticles } from 'tsparticles-engine';\nimport type { Container, Engine } from 'tsparticles-engine';\nimport { IParticlesProps } from './ng-particles.module';\n\n@Component({\n    selector: 'ng-particles',\n    template: '<div [id]=\"id\"></div>',\n})\nexport class NgParticlesComponent implements AfterViewInit, OnDestroy {\n    @Input() options?: IParticlesProps;\n    @Input() url?: string;\n    @Input() id: string;\n    @Input() particlesInit?: (engine: Engine) => Promise<void>;\n    @Output() particlesLoaded: EventEmitter<Container> = new EventEmitter<Container>();\n\n    private destroy$ = new Subject<void>();\n    private container?: Container;\n\n    constructor(@Inject(PLATFORM_ID) protected platformId: string) {\n        this.id = 'tsparticles';\n    }\n\n    public ngAfterViewInit(): void {\n        if (isPlatformServer(this.platformId)) {\n            return;\n        }\n\n        const cb = (container?: Container) => {\n            this.container = container;\n            this.particlesLoaded.emit(container);\n        };\n\n        from(this.particlesInit ? this.particlesInit(tsParticles) : Promise.resolve())\n            .pipe(\n                mergeMap(() => {\n                    if (this.url) {\n                        return tsParticles.loadJSON(this.id, this.url);\n                    } else if (this.options) {\n                        return tsParticles.load(this.id, this.options);\n                    } else {\n                        console.error('You must specify options or url to load tsParticles');\n                        return EMPTY;\n                    }\n                }),\n                takeUntil(this.destroy$)\n            )\n            .subscribe(cb);\n    }\n\n    public ngOnDestroy(): void {\n        this.container?.destroy();\n        this.destroy$.next();\n    }\n}\n\n@Component({\n    selector: 'Particles',\n    template: '<div [id]=\"id\"></div>',\n})\nexport class ParticlesComponent extends NgParticlesComponent {\n    @Input() override options?: IParticlesProps;\n    @Input() override url?: string;\n    @Input() override id: string;\n    @Input() override particlesInit?: (engine: Engine) => Promise<void>;\n    @Output() override particlesLoaded: EventEmitter<Container> = new EventEmitter<Container>();\n\n    constructor(@Inject(PLATFORM_ID) protected override platformId: string) {\n        super(platformId);\n\n        this.id = 'tsparticles';\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { NgParticlesComponent, ParticlesComponent } from './ng-particles.component';\nimport type { ISourceOptions } from 'tsparticles-engine';\n\n@NgModule({\n    declarations: [NgParticlesComponent, ParticlesComponent],\n    exports: [NgParticlesComponent, ParticlesComponent],\n})\nexport class NgParticlesModule {}\n\nexport type IParticlesProps = ISourceOptions;\nexport type IParticlesParams = IParticlesProps;\n","/*\n * Public API Surface of ng-particles\n */\n\nexport * from './lib/ng-particles.component';\nexport * from './lib/ng-particles.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}